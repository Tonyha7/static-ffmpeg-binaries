name: Release

# Runs when a new tag is created.  Creates a release for that tag, then builds
# ffmpeg and ffprobe on all OS & CPU combinations, then attaches them to the
# release.
on:
  push:
    tags:
      - "*"

env:
  FFMPEG_TAG: "n4.4"
  LIBVPX_TAG: "v1.9.0"
  AOM_TAG: "v3.1.2"
  X264_TAG: "stable"
  X265_TAG: "stable"
  LAME_VERSION: "3.100"
  OPUS_VERSION: "1.3.1"
  VORBIS_VERSION: "1.3.7"

jobs:
  draft_release:
    name: Draft release
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.draft_release.outputs.release_id }}
    steps:
      - name: Checkout repo
        shell: bash
        run: git clone --depth 1 https://github.com/"$GITHUB_REPOSITORY" repo-src

      - name: Draft release
        id: draft_release
        uses: ./repo-src/.github/workflows/custom-github-repo-api-action
        with:
          username: shaka-bot
          token: ${{ secrets.SHAKA_BOT_TOKEN }}
          method: 'draft_release("${{ github.ref }}")'

  build:
    needs: draft_release
    strategy:
      matrix:
        # TODO: Work through Windows issues
        # TODO: Finish Mac
        # TODO: Work through Linux-arm64 issues
        # TODO: Add Mac arm64?
        # TODO: Add Windows arm64?
        #os: ["ubuntu-latest", "macos-latest", "windows-latest", "linux-arm64"]
        os: ["ubuntu-latest", "windows-latest"]
        include:
          - os: ubuntu-latest
            os_name: linux
            target_arch: x64
            exe_ext: ""
          #- os: macos-latest
          #  os_name: osx
          #  target_arch: x64
          #  exe_ext: ""
          - os: windows-latest
            os_name: win
            target_arch: x64
            exe_ext: ".exe"
          #- os: linux-arm64
          #  os_name: linux
          #  target_arch: arm64
          #  exe_ext: ""

    name: Build ${{ matrix.os_name }} ${{ matrix.target_arch }}
    runs-on: ${{ matrix.os }}

    defaults:
      run:
        shell: msys2 {0}

    steps:
      - name: Install Linux packages
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -e
          set -x
          sudo apt -y install \
            cmake \
            mercurial \
            nasm \
            pkg-config \
            yasm \
            libffmpeg-nvenc-dev \
            libvdpau-dev
          # Use sudo in install commands on Linux.
          echo "SUDO=sudo" >> $GITHUB_ENV
          # Create a symlink to msys2 so that we can use that as the default
          # shell for all platforms.
          sudo ln -s /bin/bash /bin/msys2

      - name: Install macOS packages
        if: runner.os == 'macOS'
        shell: bash
        run: |
          set -e
          set -x
          brew install \
            md5sha1sum \
            mercurial \
            nasm \
            yasm
          # Use sudo in install commands on macOS.
          echo "SUDO=sudo" >> $GITHUB_ENV
          # Create a symlink to msys2 so that we can use that as the default
          # shell for all platforms.
          sudo ln -s /bin/bash /bin/msys2

      - name: Install Windows packages
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: >-
            base-devel
            cmake
            git
            mercurial
            mingw-w64-gcc
            nasm
            yasm

      - name: Install libvpx
        run: |
          set -e
          set -x
          git clone --depth 1 https://chromium.googlesource.com/webm/libvpx -b "$LIBVPX_TAG"
          cd libvpx
          # NOTE: disabling unit tests and examples significantly reduces build
          # time (by 80% as tested on a Jetson Nano)
          ./configure \
            --enable-vp8 \
            --enable-vp9 \
            --enable-runtime-cpu-detect \
            --disable-unit-tests \
            --disable-examples \
            --enable-static \
            --disable-shared
          make
          $SUDO make install

      - name: Install aom
        run: |
          set -e
          set -x
          git clone --depth 1 https://aomedia.googlesource.com/aom/ -b "$AOM_TAG"
          mkdir aom_build
          cd aom_build
          cmake ../aom \
            -DENABLE_DOCS=OFF \
            -DENABLE_EXAMPLES=OFF \
            -DENABLE_TESTS=OFF \
            -DENABLE_TESTDATA=OFF \
            -DENABLE_TOOLS=OFF \
            -DCONFIG_RUNTIME_CPU_DETECT=1 \
            -DCONFIG_SHARED=0
          make
          $SUDO make install
          # This adjustment to the aom linker flags is needed, at least on
          # arm, to successfully link against it statically.  (-lm missing)
          $SUDO sed -e 's/-laom/-laom -lm/' -i.bk /usr/local/lib/pkgconfig/aom.pc

      - name: Install x264
        run: |
          set -e
          set -x
          git clone --depth 1 https://code.videolan.org/videolan/x264.git -b "$X264_TAG"
          cd x264
          ./configure \
            --enable-static
          make libx264.a
          $SUDO make install-lib-static

      - name: Install x265
        run: |
          set -e
          set -x
          hg clone http://hg.videolan.org/x265 -r "$X265_TAG"
          cd x265/build
          cmake ../source \
            -DENABLE_CLI=OFF
          make
          $SUDO make install
          # This adjustment to the x265 linker flags is needed, at least on
          # arm, to successfully link against it statically.  (-lgcc_s not
          # found (or needed), and -lpthread missing)
          $SUDO sed -e 's/-lgcc_s -lgcc -lgcc_s -lgcc/-lpthread -lgcc/' -i.bk /usr/local/lib/pkgconfig/x265.pc

      - name: Install lame
        run: |
          set -e
          set -x
          curl -L -o lame-"$LAME_VERSION".tar.gz https://sourceforge.net/projects/lame/files/lame/"$LAME_VERSION"/lame-"$LAME_VERSION".tar.gz/download
          tar xzf lame-"$LAME_VERSION".tar.gz
          cd lame-"$LAME_VERSION"
          ./configure \
            --enable-static \
            --disable-shared
          make
          $SUDO make install

      - name: Install opus
        run: |
          set -e
          set -x
          curl -LO https://archive.mozilla.org/pub/opus/opus-"$OPUS_VERSION".tar.gz
          tar xzf opus-"$OPUS_VERSION".tar.gz
          cd opus-"$OPUS_VERSION"
          ./configure \
            --enable-static \
            --disable-shared
          make
          $SUDO make install
          # The pkgconfig linker flags for static opus don't work when ffmpeg
          # checks for opus in configure.  Linking libm after libopus fixes it.
          $SUDO sed -e 's/-lopus/-lopus -lm/' -i.bk /usr/local/lib/pkgconfig/opus.pc

      - name: Build ffmpeg and ffprobe
        run: |
          set -e
          set -x
          git clone --depth 1 https://git.ffmpeg.org/ffmpeg.git -b "$FFMPEG_TAG"
          cd ffmpeg
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            export CFLAGS="-static"
            export LDFLAGS="-static"

            # Enable platform-specific hardware acceleration.
            PLATFORM_CONFIGURE_FLAGS="--enable-nvenc --enable-vdpau"
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            export CFLAGS="-static"
            # You can't do a _truly_ static build on macOS except the kernel.
            # So don't set LDFLAGS.  See https://stackoverflow.com/a/3801032

            # Enable platform-specific hardware acceleration.
            PLATFORM_CONFIGURE_FLAGS="--enable-videotoolbox"

            # Disable x86 ASM on macOS.  It fails to build with an error about
            # how macho64 format can't contain 32-bit assembly.  I'm not sure
            # how else to resolve this, and from my searches, it appears that
            # others are not having this problem with ffmpeg.
            # TODO: Try building from master branch to see if this has been
            # resolved more recently than n4.4.
            PLATFORM_CONFIGURE_FLAGS="$PLATFORM_CONFIGURE_FLAGS --disable-x86asm --disable-inline-asm"
          fi
          ./configure \
            --pkg-config-flags="--static" \
            --disable-ffplay \
            --enable-libvpx \
            --enable-libaom \
            --enable-libx264 \
            --enable-libx265 \
            --enable-libmp3lame \
            --enable-libopus \
            --enable-runtime-cpudetect \
            --enable-gpl \
            --enable-version3 \
            --enable-static \
            $PLATFORM_CONFIGURE_FLAGS
          make
          # Show that these are not dynamic executables.  Fail if they are.
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            ldd ffmpeg && exit 1
            ldd ffprobe && exit 1
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            # TODO: Verify the usage of otool for macOS.
            otool -L ffmpeg && exit 1
            otool -L ffprobe && exit 1
          elif [[ "${{ runner.os }}" == "Windows" ]]; then
            ldd ffmpeg.exe && exit 1
            ldd ffprobe.exe && exit 1
          fi
          # After commands that we expect to fail, we still need a successful
          # command here to make this step a success.
          true

      - name: Debug
        uses: mxschmitt/action-tmate@v3
        with:
          limit-access-to-actor: true
        if: failure()

      - name: Prepare assets
        run: |
          set -e
          set -x
          mkdir assets
          SUFFIX="-${{ matrix.os_name }}-${{ matrix.target_arch }}${{ matrix.exe_ext}}"
          cp ffmpeg/ffmpeg assets/ffmpeg"$SUFFIX"
          cp ffmpeg/ffprobe assets/ffprobe"$SUFFIX"
          # Show sizes and MD5 sums that can be verified by users later if they
          # want to check for authenticity.
          cd assets
          wc -c *
          md5sum *

      - name: Checkout repo
        run: git clone --depth 1 https://github.com/"$GITHUB_REPOSITORY" repo-src

      - name: Attach assets to release
        uses: ./repo-src/.github/workflows/custom-github-repo-api-action
        with:
          username: shaka-bot
          token: ${{ secrets.SHAKA_BOT_TOKEN }}
          method: 'upload_all_assets("${{ needs.draft_release.outputs.release_id }}", "assets/")'

  publish_release:
    name: Publish release
    needs: [draft_release, build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        shell: bash
        run: git clone --depth 1 https://github.com/"$GITHUB_REPOSITORY" repo-src

      # First, we have to take the release out of draft mode.  Then, we can
      # download the assets and use their MD5 sums to update the release notes.
      - name: Publish release
        uses: ./repo-src/.github/workflows/custom-github-repo-api-action
        with:
          username: shaka-bot
          token: ${{ secrets.SHAKA_BOT_TOKEN }}
          method: 'update_release("${{ needs.draft_release.outputs.release_id }}", draft=False)'

      - name: Get all release assets
        uses: ./repo-src/.github/workflows/custom-github-repo-api-action
        with:
          username: shaka-bot
          token: ${{ secrets.SHAKA_BOT_TOKEN }}
          method: 'download_all_assets("${{ needs.draft_release.outputs.release_id }}", "assets/")'

      - name: Calculate MD5 sums of all release assets
        id: md5sum
        shell: bash
        run: |
          set -e
          set -x
          cd assets
          SUMS=$(md5sum *)
          echo "::set-output name=sums::$SUMS"
          # The sums are now in an output variable that we can use in the next
          # step to set the release body.

      - name: Update release notes
        uses: ./repo-src/.github/workflows/custom-github-repo-api-action
        with:
          username: shaka-bot
          token: ${{ secrets.SHAKA_BOT_TOKEN }}
          method: 'update_release("${{ needs.draft_release.outputs.release_id }}", body="MD5 sums:\n${{ steps.md5sum.outputs.sums }}")'
